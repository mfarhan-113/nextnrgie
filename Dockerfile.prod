# Build stage
FROM node:20-alpine AS build

WORKDIR /app

# Install Python and build dependencies
RUN apk add --no-cache python3 make g++

# Copy package files first for better caching
COPY frontend/package*.json ./

# Install dependencies with legacy peer deps to handle MUI peer dependencies
RUN npm install --legacy-peer-deps

# Copy the rest of the frontend code
COPY frontend/ .

# Build the app with environment variables
ARG REACT_APP_API_URL
ARG REACT_APP_BASE_URL
ENV REACT_APP_API_URL=$REACT_APP_API_URL
ENV REACT_APP_BASE_URL=$REACT_APP_BASE_URL
ENV NODE_OPTIONS=--openssl-legacy-provider

# Set a shell explicitly
SHELL ["/bin/ash", "-o", "pipefail", "-c"]

# Build the app with increased memory limit
RUN NODE_OPTIONS="--max-old-space-size=4096" npm run build

# Production stage
FROM nginx:stable-alpine

# Install bash for debugging if needed
RUN apk add --no-cache bash

# Copy the build output to replace the default nginx contents
COPY --from=build /app/build /usr/share/nginx/html

# Create necessary directories and copy Nginx config
RUN mkdir -p /etc/nginx/conf.d
COPY nginx.prod.conf /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chmod 644 /etc/nginx/conf.d/default.conf

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 CMD wget --no-verbose --tries=1 --spider http://localhost:80/ || exit 1

# Expose port 80
EXPOSE 80

# Start nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
