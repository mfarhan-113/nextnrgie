import React, { useState, useEffect, useCallback } from 'react';
import { useTranslation } from 'react-i18next';
import axios from 'axios';
import { styled } from '@mui/material/styles';
import {
  Box,
  Typography,
  IconButton,
  CircularProgress,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TablePagination,
  Dialog,
  TextField,
  InputAdornment,
  Snackbar,
  Alert as MuiAlert,
  Toolbar,
  Button,
  DialogActions,
  DialogContent,
  DialogTitle,
  AppBar,
  Slide
} from '@mui/material';
import {
  Visibility as VisibilityIcon,
  Download as DownloadIcon,
  Close as CloseIcon,
  Search as SearchIcon,
  Add as AddIcon
} from '@mui/icons-material';
import { format } from 'date-fns';
import { fr, enUS } from 'date-fns/locale';

// Components
import Sidebar from '../components/Sidebar';
import Navbar from '../components/Navbar';

// Styles
import '../modern-contracts.css';
import '../toast.css';

// Styled Components
const MainContent = styled(Box)(({ theme }) => ({
  flexGrow: 1,
  padding: theme.spacing(3),
  [theme.breakpoints.up('sm')]: {
    width: 'calc(100% - 240px)',
    marginLeft: '240px',
  },
}));

const StyledTableContainer = styled(TableContainer)(({ theme }) => ({
  marginTop: theme.spacing(3),
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
}));

const StyledTableHead = styled(TableHead)(({ theme }) => ({
  backgroundColor: theme.palette.primary.main,
  '& .MuiTableCell-head': {
    color: theme.palette.common.white,
    fontWeight: 'bold',
  },
}));

const StatusChip = styled(Chip)(({ theme, status = 'default' }) => {
  const statusStyles = {
    paid: {
      backgroundColor: theme.palette.success.light,
      color: theme.palette.success.dark,
    },
    pending: {
      backgroundColor: theme.palette.warning.light,
      color: theme.palette.warning.dark,
    },
    overdue: {
      backgroundColor: theme.palette.error.light,
      color: theme.palette.error.dark,
    },
    draft: {
      backgroundColor: theme.palette.grey[300],
      color: theme.palette.grey[800],
    },
    partial: {
      backgroundColor: '#fff8e1',
      color: '#f57f17',
    },
    default: {
      backgroundColor: theme.palette.grey[300],
      color: theme.palette.text.primary,
    },
  };

  return {
    fontWeight: 'bold',
    ...(statusStyles[status] || statusStyles.default),
  };
});

const PdfViewerDialog = styled(Dialog)({
  '& .MuiDialog-paper': {
    width: '90%',
    maxWidth: '1000px',
    height: '90vh',
    maxHeight: '800px',
  },
});

const PdfViewerContainer = styled('div')({
  width: '100%',
  height: '100%',
  display: 'flex',
  flexDirection: 'column',
});

const PdfViewerHeader = styled('div')(({ theme }) => ({
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  padding: theme.spacing(1, 2),
  borderBottom: `1px solid ${theme.palette.divider}`,
}));

const PdfViewerContent = styled('div')({
  flex: 1,
  overflow: 'auto',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  padding: '16px',
});
const MainContent = styled(Box)(({ theme }) => ({
  flexGrow: 1,
  padding: theme.spacing(3),
  [theme.breakpoints.up('sm')]: {
    width: 'calc(100% - 240px)',
    marginLeft: '240px',
  },
}));

const StyledTableContainer = styled(TableContainer)(({ theme }) => ({
  marginTop: theme.spacing(3),
  borderRadius: theme.shape.borderRadius,
  boxShadow: theme.shadows[2],
}));

const StyledTableHead = styled(TableHead)(({ theme }) => ({
  backgroundColor: theme.palette.primary.main,
  '& .MuiTableCell-head': {
    color: theme.palette.common.white,
    fontWeight: 'bold',
  },
}));

const StatusChip = styled(Chip)(({ theme, status }) => {
  const statusStyles = {
    paid: {
      backgroundColor: theme.palette.success.light,
      color: theme.palette.success.dark,
    },
    pending: {
      backgroundColor: theme.palette.warning.light,
      color: theme.palette.warning.dark,
    },
    overdue: {
      backgroundColor: theme.palette.error.light,
      color: theme.palette.error.dark,
    },
    draft: {
      backgroundColor: theme.palette.grey[300],
      color: theme.palette.grey[800],
    },
    partial: {
      backgroundColor: '#fff8e1',
      color: '#f57f17',
    },
    default: {
      backgroundColor: theme.palette.grey[300],
      color: theme.palette.text.primary,
    },
  };

  return {
    fontWeight: 'bold',
    ...(statusStyles[status] || statusStyles.default),
  };
});

const PdfViewerDialog = styled(Dialog)({
  '& .MuiDialog-paper': {
    width: '90%',
    maxWidth: '1000px',
    height: '90vh',
    maxHeight: '800px',
  },
});

const PdfViewerContainer = styled('div')({
  width: '100%',
  height: '100%',
  display: 'flex',
  flexDirection: 'column',
});

const PdfViewerHeader = styled('div')(({ theme }) => ({
  display: 'flex',
  justifyContent: 'space-between',
  alignItems: 'center',
  padding: theme.spacing(1, 2),
  borderBottom: `1px solid ${theme.palette.divider}`,
}));

const PdfViewerContent = styled('div')({
  flex: 1,
  overflow: 'auto',
  display: 'flex',
  justifyContent: 'center',
  alignItems: 'center',
  padding: '16px',
});

const Factures = () => {
  const { t, i18n } = useTranslation();
  
  // State management
  const [state, setState] = useState({
    invoices: [],
    loading: true,
    error: '',
    page: 0,
    rowsPerPage: 10,
    totalInvoices: 0,
    searchTerm: '',
    pdfOpen: false,
    currentPdf: null,
    snackbar: {
      open: false,
      message: '',
      severity: 'success',
    },
  });

  // Destructure state for easier access
  const {
    invoices,
    loading,
    error,
    page,
    rowsPerPage,
    totalInvoices,
    searchTerm,
    pdfOpen,
    currentPdf,
    snackbar,
  } = state;

  // Update state helper function
  const updateState = (updates) => {
    setState((prev) => ({
      ...prev,
      ...updates,
    }));
  };
  const { t, i18n } = useTranslation();
  const [state, setState] = useState({
    invoices: [],
    loading: true,
    error: '',
    page: 0,
    rowsPerPage: 10,
    totalInvoices: 0,
    searchTerm: '',
    pdfOpen: false,
    currentPdf: null,
    snackbar: {
      open: false,
      message: '',
      severity: 'success',
    },
  });

  const {
    invoices,
    loading,
    error,
    page,
    rowsPerPage,
    totalInvoices,
    searchTerm,
    pdfOpen,
    currentPdf,
    snackbar,
  } = state;

  const updateState = (updates) => {
    setState((prev) => ({
      ...prev,
      ...updates,
    }));
  };

  const fetchInvoices = useCallback(async () => {
    try {
      updateState({ loading: true });
      const response = await axios.get('/api/invoices', {
        params: {
          page: page + 1,
          limit: rowsPerPage,
          search: searchTerm,
        },
      });
      updateState({
        invoices: response.data.items || [],
        totalInvoices: response.data.total || 0,
        loading: false,
      });
    } catch (err) {
      console.error('Error fetching invoices:', err);
      const errorMessage = t('error.fetchingInvoices');
      updateState({ 
        error: errorMessage,
        loading: false,
      });
      showSnackbar(errorMessage, 'error');
    }
  }, [page, rowsPerPage, searchTerm, t]);

  useEffect(() => {
    fetchInvoices();
  }, [fetchInvoices]);

  const handleChangePage = (event, newPage) => {
    updateState({ page: newPage });
  };

  const handleChangeRowsPerPage = (event) => {
    updateState({
      rowsPerPage: parseInt(event.target.value, 10),
      page: 0,
    });
  };

  const handleSearch = (event) => {
    updateState({
      searchTerm: event.target.value,
      page: 0,
    });
  };

  const handleViewPdf = (invoice) => {
    updateState({
      currentPdf: invoice,
      pdfOpen: true,
    });
  };

  const handleDownloadPdf = async (invoiceId) => {
    try {
      const response = await axios.get(`/api/invoices/${invoiceId}/download`, {
        responseType: 'blob',
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `invoice-${invoiceId}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      showSnackbar(t('invoice.downloadSuccess'), 'success');
    } catch (err) {
      console.error('Error downloading PDF:', err);
      showSnackbar(t('error.downloadingInvoice'), 'error');
    }
  };

  const handleClosePdf = () => {
    updateState({
      pdfOpen: false,
      currentPdf: null,
    });
  };

  const showSnackbar = (message, severity = 'success') => {
    updateState({
      snackbar: {
        open: true,
        message,
        severity,
      },
    });
  };

  const handleCloseSnackbar = () => {
    updateState(prev => ({
      ...prev,
      snackbar: {
        ...prev.snackbar,
        open: false,
      },
    }));
  };

  const formatDate = (dateString) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    const locale = i18n.language === 'fr' ? fr : enUS;
    return format(date, 'PP', { locale });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat(i18n.language, {
      style: 'currency',
      currency: 'EUR',
    }).format(amount || 0);
  };

  const getStatusTranslationKey = (status) => {
    const statusMap = {
      paid: 'invoice.status.paid',
      pending: 'invoice.status.pending',
      overdue: 'invoice.status.overdue',
      draft: 'invoice.status.draft',
      partial: 'invoice.status.partial',
    };
    return statusMap[status] || 'invoice.status.unknown';
  };
  const { t, i18n } = useTranslation();
  const [invoices, setInvoices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [totalInvoices, setTotalInvoices] = useState(0);
  const [searchTerm, setSearchTerm] = useState('');
  const [pdfOpen, setPdfOpen] = useState(false);
  const [currentPdf, setCurrentPdf] = useState(null);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success',
  });

  const fetchInvoices = async () => {
    try {
      setLoading(true);
      const response = await axios.get('/api/invoices', {
        params: {
          page: page + 1,
          limit: rowsPerPage,
          search: searchTerm,
        },
      });
      setInvoices(response.data.items);
      setTotalInvoices(response.data.total);
    } catch (err) {
      setError(t('error.fetchingInvoices'));
      showSnackbar(t('error.fetchingInvoices'), 'error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchInvoices();
  }, [page, rowsPerPage, searchTerm]);

  const handleChangePage = (event, newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  };

  const handleSearch = (event) => {
    setSearchTerm(event.target.value);
    setPage(0);
  };

  const handleViewPdf = (invoice) => {
    setCurrentPdf(invoice);
    setPdfOpen(true);
  };

  const handleDownloadPdf = async (invoiceId) => {
    try {
      const response = await axios.get(`/api/invoices/${invoiceId}/download`, {
        responseType: 'blob',
      });
      
      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', `invoice-${invoiceId}.pdf`);
      document.body.appendChild(link);
      link.click();
      link.remove();
      
      showSnackbar(t('invoice.downloadSuccess'), 'success');
    } catch (err) {
      showSnackbar(t('error.downloadingInvoice'), 'error');
    }
  };

  const handleClosePdf = () => {
    setPdfOpen(false);
    setCurrentPdf(null);
  };

  const showSnackbar = (message, severity = 'success') => {
    setSnackbar({
      open: true,
      message,
      severity,
    });
  };

  const handleCloseSnackbar = () => {
    setSnackbar(prev => ({ ...prev, open: false }));
  };

  const formatDate = (dateString) => {
    if (!dateString) return '';
    
    const date = new Date(dateString);
    const locale = i18n.language === 'fr' ? fr : enUS;
    
    return format(date, 'PP', { locale });
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat(i18n.language, {
      style: 'currency',
      currency: 'EUR',
    }).format(amount);
  };

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'paid':
        return 'success';
      case 'pending':
        return 'warning';
      case 'overdue':
        return 'error';
      default:
        return 'default';
    }
  };

  if (loading && invoices.length === 0) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="80vh">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Box p={3}>
        <MuiAlert severity="error">{error}</MuiAlert>
      </Box>
    );
  }

  if (error) {
    return (
      <Box p={3}>
        <Alert severity="error">{error}</Alert>
      </Box>
    );
  }

  return (
    <Box sx={{ display: 'flex' }}>
      <CssBaseline />
      <Navbar />
      <Sidebar />
      
      <MainContent>
        <Toolbar />
        <Box mb={3}>
          <Typography variant="h4" component="h1" gutterBottom>
            {t('invoices.title')}
          </Typography>
          <Typography variant="body1" color="textSecondary">
            {t('invoices.subtitle')}
          </Typography>
        </Box>

        <Paper sx={{ p: 2, mb: 3 }}>
          <TextField
            fullWidth
            variant="outlined"
            placeholder={t('common.search')}
            value={searchTerm}
            onChange={handleSearch}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
            }}
          />
        </Paper>

        <StyledTableContainer component={Paper}>
          <Table>
            <StyledTableHead>
              <TableRow>
                <TableCell>{t('invoice.invoiceNumber')}</TableCell>
                <TableCell>{t('invoice.client')}</TableCell>
                <TableCell>{t('invoice.issueDate')}</TableCell>
                <TableCell>{t('invoice.dueDate')}</TableCell>
                <TableCell>{t('invoice.amount')}</TableCell>
                <TableCell>{t('invoice.status')}</TableCell>
                <TableCell align="right">{t('common.actions')}</TableCell>
              </TableRow>
            </StyledTableHead>
            <TableBody>
              {invoices.length > 0 ? (
                invoices.map((invoice) => (
                  <TableRow key={invoice.id} hover>
                    <TableCell>{invoice.invoice_number}</TableCell>
                    <TableCell>
                      {invoice.contract?.client?.name || t('common.notAvailable')}
                    </TableCell>
                    <TableCell>{formatDate(invoice.issue_date)}</TableCell>
                    <TableCell>{formatDate(invoice.due_date)}</TableCell>
                    <TableCell>{formatCurrency(invoice.amount)}</TableCell>
                    <TableCell>
                      <StatusChip 
                        label={t(getStatusTranslationKey(invoice.status))}
                        status={invoice.status}
                        size="small"
                      />
                    </TableCell>
                    <TableCell align="right">
                      <IconButton 
                        onClick={() => handleViewPdf(invoice)}
                        color="primary"
                        size="small"
                        title={t('common.view')}
                        sx={{ mr: 1 }}
                      >
                        <VisibilityIcon />
                      </IconButton>
                      <IconButton 
                        onClick={() => handleDownloadPdf(invoice.id)}
                        color="primary"
                        size="small"
                        title={t('common.download')}
                      >
                        <DownloadIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell colSpan={7} align="center" sx={{ py: 3 }}>
                    <Typography variant="body1" color="textSecondary">
                      {t('invoice.noInvoicesFound')}
                    </Typography>
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
          
          <TablePagination
            rowsPerPageOptions={[5, 10, 25]}
            component="div"
            count={totalInvoices}
            rowsPerPage={rowsPerPage}
            page={page}
            onPageChange={handleChangePage}
            onRowsPerPageChange={handleChangeRowsPerPage}
            labelRowsPerPage={t('common.rowsPerPage')}
            labelDisplayedRows={({ from, to, count }) => 
              `${from}-${to} ${t('common.of')} ${count}`
            }
          />
        </StyledTableContainer>

        {/* PDF Viewer Dialog */}
        <PdfViewerDialog
          open={pdfOpen}
          onClose={handleClosePdf}
          maxWidth="lg"
          fullWidth
        >
          <PdfViewerContainer>
            <PdfViewerHeader>
              <Typography variant="h6">
                {currentPdf?.invoice_number}
              </Typography>
              <IconButton onClick={handleClosePdf} size="large">
                <CloseIcon />
              </IconButton>
            </PdfViewerHeader>
            <PdfViewerContent>
              {currentPdf && (
                <iframe
                  title={`PDF-${currentPdf.id}`}
                  src={`/api/invoices/${currentPdf.id}/view`}
                  width="100%"
                  height="100%"
                  style={{ border: 'none' }}
                />
              )}
            </PdfViewerContent>
          </PdfViewerContainer>
        </PdfViewerDialog>

        {/* Snackbar for notifications */}
        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleCloseSnackbar}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <MuiAlert 
            elevation={6} 
            variant="filled" 
            onClose={handleCloseSnackbar} 
            severity={snackbar.severity}
          >
            {snackbar.message}
          </MuiAlert>
        </Snackbar>
      </MainContent>
    </Box>
  );
};

  // Fetch invoices from the API
  const fetchInvoices = useCallback(async () => {
    setLoading(true);
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/invoices`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      setInvoices(response.data || []);
    } catch (error) {
      console.error('Error fetching invoices:', error);
      setError('Failed to load invoices. Please try again later.');
    } finally {
      setLoading(false);
    }
  }, []);

  // Format date
  const formatDate = useCallback((dateString) => {
    if (!dateString) return 'N/A';
    const date = new Date(dateString);
    return date.toLocaleDateString('en-GB'); // Format: DD/MM/YYYY
  }, []);

  // Format currency
  const formatCurrency = useCallback((amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(amount || 0);
  };

  // Handle page change
  const handleChangePage = useCallback((event, newPage) => {
    setPage(newPage);
  }, []);

  // Handle rows per page change
  const handleChangeRowsPerPage = useCallback((event) => {
    setRowsPerPage(parseInt(event.target.value, 10));
    setPage(0);
  }, []);

  // Handle PDF view
  const handleViewPdf = useCallback((invoiceId) => {
    if (!invoiceId) return;
    window.open(`${process.env.REACT_APP_API_URL}/pdf/invoice/${invoiceId}`, '_blank');
  }, []);

  // Handle PDF download
  const handleDownloadPdf = useCallback((invoiceId) => {
    if (!invoiceId) return;
    window.open(`${process.env.REACT_APP_API_URL}/pdf/invoice/${invoiceId}?download=true`, '_blank');
  }, []);

  // Fetch invoices on component mount
  useEffect(() => {
    fetchInvoices();
  }, []);

  // Fetch factures for selected contract
  const fetchContractFactures = useCallback(async (contractId) => {
    try {
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/api/factures/contract/${contractId}`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      updateFormState({ contractFactures: response.data || [] });
    } catch (error) {
        console.warn('Could not fetch contract factures:', error);
      updateFormState({ contractFactures: [] });
    }
  }, [updateFormState]);

  // Handle contract selection change
  const handleContractChange = useCallback((e) => {
    const contractId = e.target.value;
    updateFormState({ selectedContractId: contractId });
    if (contractId) {
      fetchContractFactures(contractId);
    } else {
      updateFormState({ contractFactures: [] });
    }
  }, [fetchContractFactures, updateFormState]);

  // Calculate remaining contract amount
  // Handle facture form input changes
  const handleFactureChange = useCallback((e) => {
    const contractId = e.target.value;
    updateFormState({ selectedContractId: contractId });
    if (contractId) {
      fetchContractFactures(contractId);
    } else {
      updateFormState({ contractFactures: [] });
    }
  }, []);

  // Calculate remaining contract amount
  // Handle facture form input changes
  const handleFactureChange = useCallback((e) => {
    const { name, value } = e.target;
    const updatedForm = {
      ...formState.factureForm,
      [name]: name === 'qty' || name === 'unit_price' || name === 'tva' || name === 'total_ht' 
        ? parseFloat(value) || 0 
        : value
    };
    
    // Recalculate total when quantity, unit price, or TVA changes
    if (['qty', 'unit_price', 'tva'].includes(name)) {
      const qty = name === 'qty' ? parseFloat(value) || 0 : formState.factureForm.qty || 0;
      const unitPrice = name === 'unit_price' ? parseFloat(value) || 0 : formState.factureForm.unit_price || 0;
      const tvaRate = name === 'tva' ? (parseFloat(value) || 0) / 100 : (formState.factureForm.tva || 0) / 100;
      
      const subtotal = qty * unitPrice;
      const tvaAmount = subtotal * tvaRate;
      updatedForm.total_ht = subtotal + tvaAmount;
    }
    
    updateFormState({ factureForm: updatedForm });
  }, []);

  // Update contract price
  const updateContractPrice = useCallback(async (contractId, amount) => {
    try {
      // First, get the current contract data
      const response = await axios.get(
        `${process.env.REACT_APP_API_URL}/contracts/${contractId}`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      const currentContract = response.data;
      
      // Update only the price field
      await axios.put(
        `${process.env.REACT_APP_API_URL}/contracts/${contractId}`,
        { 
          ...currentContract, // Include all current fields
          price: amount       // Update just the price
        },
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        }
      );
      return true;
    } catch (error) {
      console.error('Error updating contract price:', error);
      console.error('Error details:', error.response?.data);
      return false;
    }
  }, []);

  // Handle facture form submission
  const handleFactureSubmit = useCallback(async (e) => {
    e.preventDefault();
    if (!formState.selectedContractId) {
      setError('Please select a contract');
      return;
    }
  
    try {
      // Get values from form
      const qty = parseFloat(formState.factureForm.qty) || 0;
      const unitPrice = parseFloat(formState.factureForm.unit_price) || 0;
      const tvaPercent = parseFloat(formState.factureForm.tva) || 0;
      
      // Calculate amounts
      const subtotal = qty * unitPrice;
      const tvaAmount = subtotal * (tvaPercent / 100);
      const totalHt = subtotal + tvaAmount;
      
      const selectedContract = contracts.find(c => c.id === parseInt(formState.selectedContractId));
      
      if (!selectedContract) {
        setError('Selected contract not found');
        return;
      }
  
      // Calculate new contract price
      const currentPrice = parseFloat(selectedContract.price) || 0;
      const newPrice = Math.max(0, (currentPrice + totalHt).toFixed(2));
  
      // First, update the contract price
      const updated = await updateContractPrice(formState.selectedContractId, newPrice);
      
      if (!updated) {
        setError('Failed to update contract price');
        return;
      }

      // Prepare the request data - ensure all numbers are properly formatted
      const requestData = {
        contract_id: parseInt(formState.selectedContractId),
        description: formState.factureForm.description || '',
        qty: parseFloat(qty.toFixed(2)),
        unit_price: parseFloat(unitPrice.toFixed(2)),
        tva: parseFloat(tvaPercent.toFixed(2)), // Ensure it's a number with 2 decimal places
        total_ht: parseFloat(totalHt.toFixed(2)) // Ensure it's a number with 2 decimal places
      };
      
      // Log the calculated values for debugging
      console.log('Subtotal:', subtotal);
      console.log('TVA Amount:', tvaAmount);
      console.log('Total HT (with TVA):', totalHt);

      console.log('Sending facture data:', requestData);
  
      const response = await axios.post(
        `${process.env.REACT_APP_API_URL}/api/factures`,
        requestData,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        }
      ).catch(error => {
        console.error('Error creating facture:', error.response?.data || error.message);
        throw error;
      });
      
      const newFacture = response.data;
      
      // Update local state to reflect the new price
      const updatedContracts = contracts.map(contract => 
        contract.id === parseInt(formState.selectedContractId) 
          ? { ...contract, price: newPrice }
          : contract
      );
      setContracts(updatedContracts);
  
      // Reset form and show success message
      updateFormState({
        factureForm: {
          description: '',
          qty: 1,
          unit_price: 0,
          tva: 20,
          total_ht: 0
        },
        showFactureForm: false
      });
      
      setSuccess('Facture added and contract price updated successfully!');
      
      // Close the success message after a delay
      setTimeout(() => {
        setSuccess('');
      }, 3000);
      
      // Update the contract price in the contracts list
      setContracts(contracts.map(c => 
        c.id === parseInt(formState.selectedContractId)
          ? { ...c, price: (parseFloat(c.price) - parseFloat(formState.factureForm.total_ht)).toFixed(2) }
          : c
      ));
      
      // Update the selected contract if it's currently selected
      if (selectedContract && selectedContract.id === parseInt(formState.selectedContractId)) {
        setSelectedContract(prev => {
          if (!prev) return null;
          return {
            ...prev,
            factures: [...(prev.factures || []), newFacture]
          };
        });
      }
      
      // Refresh the factures list
      fetchContractFactures(formState.selectedContractId);
      
    } catch (error) {
      console.error('Error adding facture:', error);
      setError('Failed to add facture: ' + (error.response?.data?.detail || error.message));
    }
  }, []);

  // Open facture form
  const openFactureForm = useCallback(() => {
    if (contracts.length === 0) {
      setError('No contracts available');
      return;
    }
    updateFormState({ 
      showFactureForm: true,
      factureForm: {
        description: '',
        qty: 1,
        unit_price: 0,
        tva: 20,
        total_ht: 0
      }
    });
  }, [contracts.length, setError, updateFormState]);

  // Close PDF preview
  const closePreview = useCallback(() => {
    if (contracts.length === 0) {
      setError('No contracts available');
      return;
    }
    updateFormState({ 
      showFactureForm: true,
      factureForm: {
        description: '',
        qty: 1,
        unit_price: 0,
        tva: 20,
        total_ht: 0
      }
    });
  }, []);

  // Close PDF preview
  const closePreview = useCallback(() => {
    setPreviewOpen(false);
    if (pdfUrl) {
      window.URL.revokeObjectURL(pdfUrl);
      setPdfUrl('');
    }
  }, []);

  // Show contract details (fetch contract details and factures)
  const showContractDetails = useCallback(async (contract) => {
    try {
      setLoading(true);
      setError('');
      
      // Fetch contract details (items that appear in PDF table)
      let details = [];
      let factures = [];
      
      try {
        const detailsResponse = await axios.get(
          `${process.env.REACT_APP_API_URL}/contracts/${contract.id}/details`,
          {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
          }
        );
        details = detailsResponse.data || [];
      } catch (detailsError) {
        console.warn('Could not fetch contract details:', detailsError);
        // Continue without details - they might not exist
      }
      
      try {
        const facturesResponse = await axios.get(
          `${process.env.REACT_APP_API_URL}/api/factures/contract/${contract.id}`,
          {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
          }
        );
        factures = facturesResponse.data || [];
      } catch (facturesError) {
        console.warn('Could not fetch factures:', facturesError);
        // Continue without factures - they might not exist
      }
      
      setSelectedContract({
        ...contract,
        details: details,
        factures: factures
      });
      setDetailsOpen(true);
    } catch (error) {
      console.error('Error fetching contract details:', error);
      setError(`Failed to load contract details: ${error.response?.data?.detail || error.message}`);
    } finally {
      setLoading(false);
    }
  }, []);

  // Close contract details
  const closeDetails = useCallback(() => {
    setDetailsOpen(false);
    setSelectedContract(null);
  }, []);

  // Edit facture item
  const editFactureItem = useCallback((facture) => {
    updateFormState({
      editingFacture: facture,
      editForm: {
        description: facture.description || '',
        qty: facture.qty || 1,
        unit_price: facture.unit_price || 0,
        tva: facture.tva || 20,
        total_ht: facture.total_ht || 0
      },
      editFactureOpen: true
    });
  }, []);

  // Handle edit form changes
  const handleEditFormChange = useCallback((e) => {
    const { name, value } = e.target;
    let updatedForm = {
      ...formState.editForm,
      [name]: name === 'qty' || name === 'unit_price' || name === 'tva' || name === 'total_ht' 
        ? parseFloat(value) || 0 
        : value
    };
    
    // Recalculate total when quantity, unit price, or TVA changes
    if (['qty', 'unit_price', 'tva'].includes(name)) {
      const qty = name === 'qty' ? parseFloat(value) || 0 : formState.editForm.qty || 0;
      const unitPrice = name === 'unit_price' ? parseFloat(value) || 0 : formState.editForm.unit_price || 0;
      const tvaRate = name === 'tva' ? (parseFloat(value) || 0) / 100 : (formState.editForm.tva || 0) / 100;
      
      const subtotal = qty * unitPrice;
      const tvaAmount = subtotal * tvaRate;
      updatedForm.total_ht = subtotal + tvaAmount;
    }
    
    updateFormState({ editForm: updatedForm });
  }, []);

  // Save edited facture
  const saveEditedFacture = useCallback(async (e) => {
    e.preventDefault();
    if (!formState.editingFacture) return;

    try {
      setLoading(true);
      setError('');
      
      // Calculate new values with TVA
      const qty = parseFloat(formState.editForm.qty) || 0;
      const unitPrice = parseFloat(formState.editForm.unit_price) || 0;
      const tvaRate = (parseFloat(formState.editForm.tva) || 0) / 100;
      
      const subtotal = qty * unitPrice;
      const tvaAmount = subtotal * tvaRate;
      const newAmount = subtotal + tvaAmount;
      
      const oldAmount = parseFloat(formState.editingFacture.total_ht) || 0;
      const amountDifference = newAmount - oldAmount;
      
      // Update facture with calculated values
      await axios.put(
        `${process.env.REACT_APP_API_URL}/api/factures/${formState.editingFacture.id}`,
        {
          description: formState.editForm.description,
          qty: qty,
          unit_price: unitPrice,
          tva: tvaRate * 100, // Convert back to percentage for storage
          total_ht: newAmount.toFixed(2)
        },
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      // Update contract price (subtract the difference since more/less is now invoiced)
      const contractToUpdate = contracts.find(c => c.id === formState.selectedContractId);
      if (contractToUpdate) {
        const newPrice = parseFloat(contractToUpdate.price) - amountDifference;
        
        await axios.put(
          `${process.env.REACT_APP_API_URL}/contracts/${formState.selectedContractId}`,
          { 
            ...contractToUpdate,
            price: newPrice.toFixed(2)
          },
          {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`,
              'Content-Type': 'application/json'
            }
          }
        );
        
        // Update local states
        setContracts(contracts.map(c => 
          c.id === formState.selectedContractId 
            ? { ...c, price: newPrice.toFixed(2) }
            : c
        ));
        
        // Update contract factures in state
        const updatedFactures = formState.contractFactures.map(f => 
          f.id === formState.editingFacture.id 
            ? { 
                ...f, 
                ...formState.editForm, 
                qty: parseFloat(formState.editForm.qty), 
                unit_price: parseFloat(formState.editForm.unit_price), 
                tva: parseFloat(formState.editForm.tva), 
                total_ht: parseFloat(formState.editForm.total_ht) 
              }
            : f
        );
        
        updateFormState({ contractFactures: updatedFactures });
        
        // Update selected contract's factures if it's the current contract
        if (selectedContract && selectedContract.id === parseInt(formState.selectedContractId)) {
          setSelectedContract(prev => ({
            ...prev,
            factures: (prev.factures || []).map(f => 
              f.id === formState.editingFacture.id 
                ? { 
                    ...f, 
                    ...formState.editForm, 
                    qty: parseFloat(formState.editForm.qty), 
                    unit_price: parseFloat(formState.editForm.unit_price), 
                    tva: parseFloat(formState.editForm.tva), 
                    total_ht: parseFloat(formState.editForm.total_ht) 
                  } 
                : f
            )
          }));
        }
      }
      
      setSuccess('Facture updated successfully!');
      updateFormState({ 
        editFactureOpen: false,
        editingFacture: null,
        editForm: {
          id: null,
          description: '',
          qty: 1,
          unit_price: 0,
          tva: 20,
          total_ht: 0
        }
      });
      setTimeout(() => setSuccess(''), 3000);
      
    } catch (error) {
      console.error('Error updating facture:', error);
      setError(`Failed to update facture: ${error.response?.data?.detail || error.message}`);
    } finally {
      setLoading(false);
    }
  }, []);

  // Cancel edit
  const cancelEdit = useCallback(() => {
    updateFormState({ 
      editFactureOpen: false,
      editingFacture: null,
      editForm: {
        id: null,
        description: '',
        qty: 1,
        unit_price: 0,
        tva: 20,
        total_ht: 0
      }
    });
  }, []);

  // Delete facture item
  const deleteFactureItem = useCallback(async (factureId) => {
    if (!window.confirm('Are you sure you want to delete this facture item?')) {
      return;
    }

    try {
      setLoading(true);
      setError('');
      
      await axios.delete(
        `${process.env.REACT_APP_API_URL}/api/factures/${factureId}`,
        {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        }
      );
      
      // Update the contract factures in state
      const deletedFacture = formState.contractFactures.find(f => f.id === factureId);
      if (deletedFacture) {
        // Update contract price (add back the deleted facture amount)
        const contractToUpdate = contracts.find(c => c.id === parseInt(formState.selectedContractId));
        if (contractToUpdate) {
          const newPrice = parseFloat(contractToUpdate.price) + parseFloat(deletedFacture.total_ht);
          
          // Update contract price in backend
          await axios.put(
            `${process.env.REACT_APP_API_URL}/contracts/${formState.selectedContractId}`,
            { 
              ...contractToUpdate,
              price: newPrice.toFixed(2)
            },
            {
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`,
                'Content-Type': 'application/json'
              }
            }
          );
          
          // Update local contracts state
          setContracts(contracts.map(c => 
            c.id === parseInt(formState.selectedContractId)
              ? { ...c, price: newPrice.toFixed(2) }
              : c
          ));
          
          // Update contract factures in state
          const updatedFactures = formState.contractFactures.filter(f => f.id !== factureId);
          updateFormState({ contractFactures: updatedFactures });
          
          // Update selected contract's factures if it's the current contract
          if (selectedContract && selectedContract.id === parseInt(formState.selectedContractId)) {
            setSelectedContract(prev => ({
              ...prev,
              factures: (prev.factures || []).filter(f => f.id !== factureId)
            }));
          }
        }
      }
      
      setSuccess('Facture item deleted successfully!');
      setTimeout(() => setSuccess(''), 3000);
      
    } catch (error) {
      console.error('Error deleting facture:', error);
      setError(`Failed to delete facture: ${error.response?.data?.detail || error.message}`);
    } finally {
      setLoading(false);
    }
  };

  // Fetch contracts on component mount
  useEffect(() => {
    fetchContracts();
  }, []);

  // Fetch all contracts
  const fetchContracts = async () => {
    try {
      setLoadingContracts(true);
      const response = await axios.get(`${process.env.REACT_APP_API_URL}/contracts/`, {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      setContracts(response.data);
      setError('');
    } catch (error) {
      console.error('Error fetching contracts:', error);
      setError('Failed to load contracts');
    } finally {
      setLoadingContracts(false);
    }
  }, []);

  return (
    <Box sx={{ 
      display: 'flex', 
      minHeight: '100vh', 
      background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
      position: 'relative',
      '&::before': {
        content: '""',
        position: 'absolute',
        top: 0,
        left: 0,
        right: 0,
        bottom: 0,
        background: 'linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%)',
        backdropFilter: 'blur(10px)',
      }
    }}>
      <CssBaseline />
      <Navbar onMenuClick={() => setMobileOpen(!mobileOpen)} />
      <Sidebar mobileOpen={mobileOpen} onDrawerToggle={() => setMobileOpen(false)} />
      
      <Box component="main" sx={{ 
        flexGrow: 1, 
        px: { xs: 2, md: 4 }, 
        mt: { xs: 7.5, md: 8 }, 
        pb: 4, 
        minHeight: '100vh', 
        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)',
        background: 'rgba(255,255,255,0.95)', 
        backdropFilter: 'blur(20px)',
        borderRadius: { md: '24px 0 0 0' },
        boxShadow: { md: '0 0 40px rgba(0,0,0,0.1)', xs: 0 },
        position: 'relative',
        zIndex: 1
      }}>
        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 4 }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Typography variant="h3" fontWeight={800} sx={{ 
              background: 'linear-gradient(135deg, #9c27b0 0%, #673ab7 100%)',
              backgroundClip: 'text',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
              mr: 2
            }}>
              {t('factures')}
            </Typography>
            <Box sx={{ 
              width: 4, 
              height: 40, 
              background: 'linear-gradient(135deg, #9c27b0 0%, #673ab7 100%)',
              borderRadius: 2 
            }} />
          </Box>
          
          {/* Add Invoice Button */}
          <Button
            variant="contained"
            startIcon={<AddIcon />}
            onClick={openFactureForm}
            sx={{
              background: 'linear-gradient(135deg, #9c27b0 0%, #673ab7 100%)',
              borderRadius: '12px',
              px: 3,
              py: 1.5,
              fontWeight: 600,
              textTransform: 'none',
              boxShadow: '0 4px 15px rgba(156, 39, 176, 0.4)',
              '&:hover': {
                background: 'linear-gradient(135deg, #8e24aa 0%, #5e35b1 100%)',
                transform: 'translateY(-2px)',
                boxShadow: '0 6px 20px rgba(156, 39, 176, 0.6)',
              },
              transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'
            }}
          >
            {t('add_facture') || 'Add Invoice'}
          </Button>
        </Box>

        {/* Success/Error Messages */}
        {error && (
          <Fade in={true}>
            <Box sx={{ 
              mb: 3, 
              p: 2.5, 
              backgroundColor: alpha('#f44336', 0.1),
              borderRadius: 2,
              border: '1px solid',
              borderColor: alpha('#f44336', 0.2),
              display: 'flex',
              alignItems: 'center'
            }}>
              <Box sx={{ 
                width: 4, 
                height: 40, 
                backgroundColor: '#f44336',
                borderRadius: 1,
                mr: 2
              }} />
              <Typography color="error" fontWeight={500}>{error}</Typography>
            </Box>
          </Fade>
        )}
        {success && (
          <Fade in={true}>
            <Box sx={{ 
              mb: 3, 
              p: 2.5, 
              backgroundColor: alpha('#4caf50', 0.1),
              borderRadius: 2,
              border: '1px solid',
              borderColor: alpha('#4caf50', 0.2),
              display: 'flex',
              alignItems: 'center'
            }}>
              <Box sx={{ 
                width: 4, 
                height: 40, 
                backgroundColor: '#4caf50',
                borderRadius: 1,
                mr: 2
              }} />
              <Typography color="success.main" fontWeight={500}>{success}</Typography>
            </Box>
          </Fade>
        )}

        {/* Stats Overview */}
        <Box sx={{ mb: 4 }}>
          <Typography variant="h5" fontWeight={600} sx={{ color: '#333', mb: 3 }}>
            📊 {t('overview') || 'Aperçu'}
          </Typography>
          <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', sm: '1fr 1fr', md: '1fr 1fr 1fr' }, gap: 3 }}>
            <StatsCard>
              <CardContent sx={{ textAlign: 'center', py: 3 }}>
                <Typography variant="h3" fontWeight="bold" sx={{ mb: 1 }}>
                  {contracts.length}
                </Typography>
                <Typography variant="body1" sx={{ opacity: 0.9 }}>
                  {t('total_contracts') || 'Total Contrats'}
                </Typography>
              </CardContent>
            </StatsCard>
            <StatsCard sx={{ background: 'linear-gradient(135deg, #11998e 0%, #38ef7d 100%)' }}>
              <CardContent sx={{ textAlign: 'center', py: 3 }}>
                <Typography variant="h3" fontWeight="bold" sx={{ mb: 1 }}>
                  €{contracts.reduce((sum, c) => sum + (parseFloat(c.price) || 0), 0).toFixed(0)}
                </Typography>
                <Typography variant="body1" sx={{ opacity: 0.9 }}>
                  {t('total_value') || 'Valeur Totale'}
                </Typography>
              </CardContent>
            </StatsCard>
            <StatsCard sx={{ background: 'linear-gradient(135deg, #fc466b 0%, #3f5efb 100%)' }}>
              <CardContent sx={{ textAlign: 'center', py: 3 }}>
                <Typography variant="h3" fontWeight="bold" sx={{ mb: 1 }}>
                  {contracts.filter(c => parseFloat(c.price) > 0).length}
                </Typography>
                <Typography variant="body1" sx={{ opacity: 0.9 }}>
                  {t('active') || 'Actif'}
                </Typography>
              </CardContent>
            </StatsCard>
          </Box>
        </Box>

        {/* Contracts Grid */}
        <Box sx={{ mb: 4 }}>
          <Typography variant="h5" fontWeight={600} sx={{ color: '#333', mb: 3 }}>
            📋 {t('contracts') || 'Contrats'}
          </Typography>
          
          {loadingContracts ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', py: 8 }}>
              <CircularProgress size={40} sx={{ color: '#9c27b0' }} />
              <Typography sx={{ ml: 2, color: '#666' }}>{t('loading') || 'Chargement des contrats...'}</Typography>
            </Box>
          ) : (contracts || []).length > 0 ? (
            <Box sx={{ 
              display: 'grid', 
              gridTemplateColumns: { 
                xs: '1fr', 
                sm: 'repeat(2, 1fr)', 
                md: 'repeat(3, 1fr)',
                lg: 'repeat(4, 1fr)' 
              }, 
              gap: 3 
            }}>
              {contracts.map((contract, index) => (
                <Fade in={true} timeout={300 + index * 100} key={contract.id}>
                  <ModernCard>
                    <CardContent sx={{ pb: 1 }}>
                      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                        <Typography variant="h6" fontWeight="bold" sx={{ color: '#333', fontSize: '1.1rem' }}>
                          {contract.command_number || `Contract #${contract.id}`}
                        </Typography>
                        <Chip 
                          label={parseFloat(contract.price) > 0 ? 'Active' : 'Pending'} 
                          size="small"
                          sx={{ 
                            backgroundColor: parseFloat(contract.price) > 0 ? alpha('#4caf50', 0.1) : alpha('#ff9800', 0.1),
                            color: parseFloat(contract.price) > 0 ? '#4caf50' : '#ff9800',
                            fontWeight: 'bold'
                          }}
                        />
                      </Box>
                      
                      <Box sx={{ mb: 2 }}>
                        <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                          {t('contract_value') || 'Valeur du Contrat'}
                        </Typography>
                        <Typography variant="h5" fontWeight="bold" sx={{ color: '#9c27b0' }}>
                          €{parseFloat(contract.price || 0).toFixed(2)}
                        </Typography>
                      </Box>

                      {contract.deadline && (
                        <Box sx={{ mb: 2 }}>
                          <Typography variant="body2" color="text.secondary" sx={{ mb: 0.5 }}>
                            {t('deadline') || 'Date Limite'}
                          </Typography>
                          <Typography variant="body2" sx={{ color: '#666' }}>
                            {new Date(contract.deadline).toLocaleDateString()}
                          </Typography>
                        </Box>
                      )}
                    </CardContent>
                    
                    <CardActions sx={{ px: 2, pb: 2, justifyContent: 'space-between' }}>
                      <Box sx={{ display: 'flex', gap: 1 }}>
                        <Tooltip title={t('view_pdf') || 'View PDF'} arrow>
                          <ActionButton
                            variant="view"
                            onClick={() => generatePdf(contract)}
                            disabled={loadingPdf}
                          >
                            <VisibilityIcon fontSize="small" />
                          </ActionButton>
                        </Tooltip>
                        
                        <Tooltip title={t('contract_details') || 'Contract Details'} arrow>
                          <ActionButton
                            variant="info"
                            onClick={() => showContractDetails(contract)}
                          >
                            <InfoIcon fontSize="small" />
                          </ActionButton>
                        </Tooltip>
                      </Box>
                      
                      <Typography variant="caption" color="text.secondary">
                        ID: {contract.id}
                      </Typography>
                    </CardActions>
                  </ModernCard>
                </Fade>
              ))}
            </Box>
          ) : (
            <ModernCard sx={{ textAlign: 'center', py: 6 }}>
              <CardContent>
                <Typography variant="h6" color="text.secondary" sx={{ mb: 2 }}>
                  📄 No contracts found
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  Create your first contract to get started
                </Typography>
              </CardContent>
            </ModernCard>
          )}
        </Box>

        {/* PDF Preview Modal */}
        {previewOpen && (
          <ModalOverlay>
            <PdfPreviewContainer>
              <PdfPreviewHeader>
                <Typography variant="h6">{t('contract_preview') || 'Aperçu du Contrat'}</Typography>
                <IconButton onClick={closePreview}>
                  <CloseIcon />
                </IconButton>
              </PdfPreviewHeader>
              <PdfPreviewContent>
                {loadingPdf ? (
                  <div style={{
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'center',
                    alignItems: 'center',
                    height: '100%',
                    gap: '1rem'
                  }}>
                    <CircularProgress />
                    <p>{t('loading_pdf') || 'Chargement du PDF...'}</p>
                  </div>
                ) : (
                  <iframe 
                    src={pdfUrl} 
                    title={t('contract_pdf') || 'PDF du Contrat'} 
                    width="100%" 
                    height="100%"
                    style={{ border: 'none' }}
                  />
                )}
              </PdfPreviewContent>
            </PdfPreviewContainer>
          </ModalOverlay>
        )}

        {/* Contract Details Modal */}
        {detailsOpen && selectedContract && (
          <ModalOverlay>
            <PdfPreviewContainer style={{ width: '90%', height: '85%' }}>
              <PdfPreviewHeader>
                <Typography variant="h6">
                  {t('contract_details') || 'Détails du Contrat'} - {selectedContract.command_number || `${t('contract') || 'Contrat'} #${selectedContract.id}`}
                </Typography>
                <IconButton onClick={closeDetails}>
                  <CloseIcon />
                </IconButton>
              </PdfPreviewHeader>
              <PdfPreviewContent style={{ padding: '1.5rem', overflow: 'auto' }}>
                {loading ? (
                  <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '200px' }}>
                    <CircularProgress />
                    <Typography sx={{ ml: 2 }}>{t('loading_contract_details') || 'Chargement des détails du contrat...'}</Typography>
                  </div>
                ) : (
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '2rem' }}>
                    {/* Contract Details Table */}
                    <div>
                      <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2, color: '#9c27b0' }}>
                        {t('contract_items_pdf') || 'Articles du Contrat (comme affiché dans le PDF)'}
                      </Typography>
                      {selectedContract.details && selectedContract.details.length > 0 ? (
                        <div style={{ overflowX: 'auto' }}>
                          <table className="modern-table" style={{ width: '100%', borderCollapse: 'collapse' }}>
                            <thead>
                              <tr>
                                <th>{t('description') || 'Description'}</th>
                                <th>{t('qty') || 'Qté'}</th>
                                <th>{t('unit_price') || 'Prix Unitaire'}</th>
                                <th>{t('tva_percent') || 'TVA (%)'}</th>
                                <th>{t('total_ht') || 'Total HT'}</th>
                              </tr>
                            </thead>
                            <tbody>
                              {selectedContract.details.map((detail, index) => (
                                <tr key={index}>
                                  <td>{detail.description}</td>
                                  <td>{detail.qty}</td>
                                  <td>€{Number(detail.unit_price).toFixed(2)}</td>
                                  <td>{detail.tva || 0}%</td>
                                  <td>€{Number(detail.total_ht).toFixed(2)}</td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      ) : (
                        <div style={{ 
                          backgroundColor: '#f5f5f5', 
                          padding: '2rem', 
                          borderRadius: '8px', 
                          textAlign: 'center',
                          color: '#666'
                        }}>
                          <Typography>{t('no_contract_details') || 'Aucun détail de contrat trouvé. Ce contrat utilise l\'entrée de service par défaut.'}</Typography>
                          <Typography variant="body2" sx={{ mt: 1 }}>
                            {t('default_service_entry') || 'Par défaut: "Services selon contrat"'} - {t('qty') || 'Qté'}: 1 - {t('price') || 'Prix'}: €{Number(selectedContract.price || 0).toFixed(2)}
                          </Typography>
                        </div>
                      )}
                    </div>

                    {/* Factures Table */}
                    <div>
                      <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2, color: '#9c27b0' }}>
                        {t('factures_invoiced_items') || 'Factures (Articles Facturés)'}
                      </Typography>
                      {selectedContract.factures && selectedContract.factures.length > 0 ? (
                        <div style={{ overflowX: 'auto' }}>
                          <table className="modern-table" style={{ width: '100%', borderCollapse: 'collapse' }}>
                            <thead>
                              <tr>
                                <th>{t('description') || 'Description'}</th>
                                <th>{t('qty') || 'Qté'}</th>
                                <th>{t('unit_price') || 'Prix Unitaire'}</th>
                                <th>{t('tva_percent') || 'TVA (%)'}</th>
                                <th>{t('total_ht') || 'Total HT'}</th>
                                <th>{t('date') || 'Date'}</th>
                                <th>{t('actions') || 'Actions'}</th>
                              </tr>
                            </thead>
                            <tbody>
                              {selectedContract.factures.map((facture, index) => (
                                <tr key={facture.id || index}>
                                  <td>{facture.description}</td>
                                  <td>{facture.qty}</td>
                                  <td>€{Number(facture.unit_price).toFixed(2)}</td>
                                  <td>{facture.tva || 0}%</td>
                                  <td>€{Number(facture.total_ht).toFixed(2)}</td>
                                  <td>{facture.created_at ? new Date(facture.created_at).toLocaleDateString() : 'N/A'}</td>
                                  <td>
                                    <Box sx={{ display: 'flex', gap: 0.5 }}>
                                      <Tooltip title={t('edit_facture_item') || 'Modifier l\'Article de Facture'} arrow>
                                        <IconButton
                                          onClick={() => editFactureItem(facture)}
                                          disabled={loading}
                                          sx={{ 
                                            color: '#2196f3',
                                            '&:hover': { 
                                              backgroundColor: alpha('#2196f3', 0.1),
                                              transform: 'scale(1.1)' 
                                            },
                                            '&:disabled': {
                                              color: '#ccc'
                                            },
                                            transition: 'all 0.2s ease-in-out'
                                          }}
                                        >
                                          <EditIcon fontSize="small" />
                                        </IconButton>
                                      </Tooltip>
                                      <Tooltip title={t('delete_facture_item') || 'Supprimer l\'Article de Facture'} arrow>
                                        <IconButton
                                          onClick={() => deleteFactureItem(facture.id)}
                                          disabled={loading}
                                          sx={{ 
                                            color: '#f44336',
                                            '&:hover': { 
                                              backgroundColor: alpha('#f44336', 0.1),
                                              transform: 'scale(1.1)' 
                                            },
                                            '&:disabled': {
                                              color: '#ccc'
                                            },
                                            transition: 'all 0.2s ease-in-out'
                                          }}
                                        >
                                          <DeleteIcon fontSize="small" />
                                        </IconButton>
                                      </Tooltip>
                                    </Box>
                                  </td>
                                </tr>
                              ))}
                            </tbody>
                          </table>
                        </div>
                      ) : (
                        <div style={{ 
                          backgroundColor: '#f5f5f5', 
                          padding: '2rem', 
                          borderRadius: '8px', 
                          textAlign: 'center',
                          color: '#666'
                        }}>
                          <Typography>No factures created for this contract yet.</Typography>
                        </div>
                      )}
                    </div>

                    {/* Summary */}
                  </div>
                )}
              </PdfPreviewContent>
            </PdfPreviewContainer>
          </ModalOverlay>
        )}
      </Box>
      
      {/* Facture Form Modal (Devis-style) */}
      {formState.showFactureForm && (
        <div className="modal-overlay" onClick={() => updateFormState({ showFactureForm: false })} style={{
          position: 'fixed', top: 0, left: 0, right: 0, bottom: 0,
          backgroundColor: 'rgba(0, 0, 0, 0.5)', display: 'flex', alignItems: 'center', justifyContent: 'center', zIndex: 1000
        }}>
          <div className="modal-content" onClick={e => e.stopPropagation()} style={{
            background: 'white', borderRadius: '12px', boxShadow: '0 8px 30px rgba(0,0,0,0.12)',
            width: '90vw', maxWidth: '700px', maxHeight: '90vh', padding: '1.5rem', overflow: 'auto', display: 'flex', flexDirection: 'column'
          }}>
            <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '1rem' }}>
              <h3 style={{ margin: 0 }}>{t('add_facture') || 'Add Facture'}</h3>
              <IconButton onClick={() => updateFormState({ showFactureForm: false })} size="small"><CloseIcon /></IconButton>
            </div>
            <form onSubmit={handleFactureSubmit} className="contracts-form" style={{ display: 'flex', flexDirection: 'column', gap: '1.25rem' }}>
              <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                <div className="form-group" style={{ gridColumn: 'span 2' }}>
                  <select id="contract_id" value={formState.selectedContractId} onChange={handleContractChange} required>
                    <option value="">{t('select_contract') || 'Select Contract'}</option>
                    {contracts.map(contract => (
                      <option key={contract.id} value={contract.id}>
                        {contract.command_number || `Contract #${contract.id}`} - €{Number(contract.price).toFixed(2)}
                      </option>
                    ))}
                  </select>
                  <label htmlFor="contract_id">{t('contracts') || 'Contracts'}</label>
                </div>
                
                <div className="form-group" style={{ gridColumn: 'span 2' }}>
                  <textarea 
                    id="facture_description" 
                    name="description" 
                    value={formState.factureForm.description} 
                    onChange={handleFactureChange} 
                    placeholder=" " 
                    required 
                    rows="3"
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && e.shiftKey) {
                        // Allow Shift+Enter for new line
                        e.stopPropagation();
                      } else if (e.key === 'Enter' && !e.shiftKey) {
                        // Prevent regular Enter from submitting form
                        e.preventDefault();
                      }
                    }}
                    style={{
                      resize: 'vertical',
                      minHeight: '60px',
                      fontFamily: 'inherit',
                      fontSize: 'inherit'
                    }}
                  />
                  <label htmlFor="facture_description">{t('description')}</label>
                </div>
                <div className="form-group">
                  <input id="facture_qty" name="qty" type="number" min="0" value={formState.factureForm.qty} onChange={handleFactureChange} placeholder=" " required />
                  <label htmlFor="facture_qty">{t('qty')}</label>
                </div>
                <div className="form-group">
                  <input id="facture_unit_price" name="unit_price" type="number" min="0" step="0.01" value={formState.factureForm.unit_price} onChange={handleFactureChange} placeholder=" " required />
                  <label htmlFor="facture_unit_price">{t('unit_price')}</label>
                </div>
                <div className="form-group">
                  <input id="facture_tva" name="tva" type="number" min="0" step="0.01" value={formState.factureForm.tva} onChange={handleFactureChange} placeholder=" " required />
                  <label htmlFor="facture_tva">{t('tva_percent')}</label>
                </div>
                <div className="form-group">
                  <input 
                    id="facture_total_ht" 
                    name="total_ht" 
                    type="number" 
                    min="0" 
                    step="0.01" 
                    value={formState.factureForm.total_ht} 
                    onChange={handleFactureChange} 
                    placeholder=" " 
                    required 
                  />
                  <label htmlFor="facture_total_ht">{t('total_ht')}</label>
                </div>
              </div>
              <div className="form-actions" style={{ display: 'flex', gap: '0.75rem', justifyContent: 'flex-end' }}>
                <button type="button" className="btn-secondary" onClick={() => updateFormState({ showFactureForm: false })} style={{ padding: '0.6rem 1rem' }}>{t('cancel') || 'Cancel'}</button>
                <button 
                  type="submit" 
                  className="btn-primary" 
                  disabled={loading} 
                  style={{ 
                    padding: '0.6rem 1rem', 
                    background: '#4caf50', 
                    color: 'white',
                    cursor: 'pointer'
                  }}
                >
                  {loading ? (t('saving') || 'Saving...') : (t('save_facture') || 'Save Facture')}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Edit Facture Modal */}
      {formState.editFactureOpen && formState.editingFacture && (
        <ModalOverlay>
          <PdfPreviewContainer style={{ width: '600px', height: 'auto', maxHeight: '80vh' }}>
            <PdfPreviewHeader>
              <Typography variant="h6" sx={{ color: '#2196f3', fontWeight: 'bold' }}>
                ✏️ Edit Facture Item
              </Typography>
              <IconButton onClick={cancelEdit}>
                <CloseIcon />
              </IconButton>
            </PdfPreviewHeader>
            <PdfPreviewContent style={{ padding: '2rem', overflow: 'auto' }}>
              <form onSubmit={saveEditedFacture} style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem' }}>
                <Box sx={{ 
                  backgroundColor: '#e3f2fd', 
                  padding: '1rem', 
                  borderRadius: '8px',
                  border: '1px solid #bbdefb',
                  mb: 2
                }}>
                  <Typography variant="body2" sx={{ color: '#1976d2', fontWeight: 'bold' }}>
                    Editing: {formState.editingFacture.description}
                  </Typography>
                  <Typography variant="body2" sx={{ color: '#1976d2' }}>
                    Original Amount: €{Number(formState.editingFacture.total_ht).toFixed(2)}
                  </Typography>
                </Box>

                <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                  <div className="form-group" style={{ gridColumn: 'span 2' }}>
                    <textarea 
                      id="edit_description" 
                      name="description" 
                      value={formState.editForm.description} 
                      onChange={handleEditFormChange} 
                      placeholder=" " 
                      required 
                      rows="3"
                      onKeyDown={(e) => {
                        if (e.key === 'Enter' && e.shiftKey) {
                          // Allow Shift+Enter for new line
                          e.stopPropagation();
                        } else if (e.key === 'Enter' && !e.shiftKey) {
                          // Prevent regular Enter from submitting form
                          e.preventDefault();
                        }
                      }}
                      style={{
                        resize: 'vertical',
                        minHeight: '60px',
                        fontFamily: 'inherit',
                        fontSize: 'inherit'
                      }}
                    />
                    <label htmlFor="edit_description">Description</label>
                  </div>
                  
                  <div className="form-group">
                    <input 
                      id="edit_qty" 
                      name="qty" 
                      type="number" 
                      min="0" 
                      value={formState.editForm.qty} 
                      onChange={handleEditFormChange} 
                      placeholder=" " 
                      required 
                    />
                    <label htmlFor="edit_qty">Quantity</label>
                  </div>
                  
                  <div className="form-group">
                    <input 
                      id="edit_unit_price" 
                      name="unit_price" 
                      type="number" 
                      min="0" 
                      step="0.01" 
                      value={formState.editForm.unit_price} 
                      onChange={handleEditFormChange} 
                      placeholder=" " 
                      required 
                    />
                    <label htmlFor="edit_unit_price">Unit Price (€)</label>
                  </div>
                  
                  <div className="form-group">
                    <input 
                      id="edit_tva" 
                      name="tva" 
                      type="number" 
                      min="0" 
                      step="0.01" 
                      value={formState.editForm.tva} 
                      onChange={handleEditFormChange} 
                      placeholder=" " 
                      required 
                    />
                    <label htmlFor="edit_tva">TVA (%)</label>
                  </div>
                  
                  <div className="form-group">
                    <input 
                      id="edit_total_ht" 
                      name="total_ht" 
                      type="number" 
                      min="0" 
                      step="0.01" 
                      value={formState.editForm.total_ht} 
                      onChange={handleEditFormChange} 
                      placeholder=" " 
                      required 
                    />
                    <label htmlFor="edit_total_ht">Total HT (€)</label>
                  </div>
                </div>

                <Box sx={{ display: 'flex', gap: 2, justifyContent: 'flex-end', mt: 2 }}>
                  <Button
                    variant="outlined"
                    onClick={cancelEdit}
                    sx={{ 
                      minWidth: '120px',
                      borderColor: '#666',
                      color: '#666',
                      '&:hover': {
                        borderColor: '#333',
                        backgroundColor: alpha('#666', 0.1)
                      }
                    }}
                  >
                    Cancel
                  </Button>
                  <Button
                    type="submit"
                    variant="contained"
                    disabled={loading}
                    sx={{ 
                      minWidth: '120px',
                      backgroundColor: '#2196f3',
                      '&:hover': {
                        backgroundColor: '#1976d2'
                      }
                    }}
                  >
                    {loading ? <CircularProgress size={20} color="inherit" /> : (t('save_changes') || 'Enregistrer les Modifications')}
                  </Button>
                </Box>
              </form>
            </PdfPreviewContent>
          </PdfPreviewContainer>
        </ModalOverlay>
      )}
    </Box>
  );
}

export default Factures;
